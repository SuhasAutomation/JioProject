<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="2" total="2" passed="0">
  <reporter-output>
  </reporter-output>
  <suite name="TestNG Forum" duration-ms="19563" started-at="2016-06-08T10:25:10Z" finished-at="2016-06-08T10:25:29Z">
    <groups>
    </groups>
    <test name="TestNG Test0" duration-ms="19516" started-at="2016-06-08T10:25:10Z" finished-at="2016-06-08T10:25:29Z">
      <class name="com.appium.tests.LoginTest">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]]" name="beforeClass" is-config="true" duration-ms="3753" started-at="2016-06-08T15:55:10Z" finished-at="2016-06-08T15:55:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="startApp(java.lang.reflect.Method)[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]]" name="startApp" is-config="true" duration-ms="10144" started-at="2016-06-08T15:55:13Z" finished-at="2016-06-08T15:55:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.appium.tests.LoginTest.loginWithValidUser() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startApp -->
        <test-method status="FAIL" signature="loginWithValidUser()[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]]" name="loginWithValidUser" duration-ms="188" started-at="2016-06-08T15:55:24Z" finished-at="2016-06-08T15:55:24Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[@$Proxy8: one of [uiAutomator, accessibility, className, id, tagName, name, xpath, linkText, partialLinkText] should be filled]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: @$Proxy8: one of [uiAutomator, accessibility, className, id, tagName, name, xpath, linkText, partialLinkText] should be filled
	at io.appium.java_client.pagefactory.bys.builder.AppiumByBuilder.getFilledValue(AppiumByBuilder.java:93)
	at io.appium.java_client.pagefactory.bys.builder.AppiumByBuilder.createBy(AppiumByBuilder.java:134)
	at io.appium.java_client.pagefactory.DefaultElementByBuilder.buildMobileNativeBy(DefaultElementByBuilder.java:141)
	at io.appium.java_client.pagefactory.DefaultElementByBuilder.buildBy(DefaultElementByBuilder.java:192)
	at io.appium.java_client.pagefactory.AppiumElementLocatorFactory.createLocator(AppiumElementLocatorFactory.java:61)
	at io.appium.java_client.pagefactory.AppiumElementLocatorFactory.createLocator(AppiumElementLocatorFactory.java:46)
	at io.appium.java_client.pagefactory.AppiumElementLocatorFactory.createLocator(AppiumElementLocatorFactory.java:1)
	at org.openqa.selenium.support.pagefactory.DefaultFieldDecorator.decorate(DefaultFieldDecorator.java:56)
	at io.appium.java_client.pagefactory.AppiumFieldDecorator.decorate(AppiumFieldDecorator.java:155)
	at org.openqa.selenium.support.PageFactory.proxyFields(PageFactory.java:113)
	at org.openqa.selenium.support.PageFactory.initElements(PageFactory.java:105)
	at com.appium.pages.LoginPage.<init>(LoginPage.java:23)
	at com.appium.tests.LoginTest.loginWithValidUser(LoginTest.java:19)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:39)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:400)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithValidUser -->
        <test-method status="PASS" signature="killServer(org.testng.ITestResult)[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]]" name="killServer" is-config="true" duration-ms="5268" started-at="2016-06-08T15:55:24Z" finished-at="2016-06-08T15:55:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithValidUser on [LoginTest passed=0 failed=0 skipped=0] status=FAILURE method=LoginTest.loginWithValidUser()[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killServer -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]]" name="afterClass" is-config="true" duration-ms="160" started-at="2016-06-08T15:55:29Z" finished-at="2016-06-08T15:55:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- com.appium.tests.LoginTest -->
    </test> <!-- TestNG Test0 -->
    <test name="TestNG Test1" duration-ms="19563" started-at="2016-06-08T10:25:10Z" finished-at="2016-06-08T10:25:29Z">
      <class name="com.appium.tests.LoginTest">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]]" name="beforeClass" is-config="true" duration-ms="3753" started-at="2016-06-08T15:55:10Z" finished-at="2016-06-08T15:55:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="startApp(java.lang.reflect.Method)[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]]" name="startApp" is-config="true" duration-ms="10321" started-at="2016-06-08T15:55:13Z" finished-at="2016-06-08T15:55:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.appium.tests.LoginTest.loginWithValidUser() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startApp -->
        <test-method status="FAIL" signature="loginWithValidUser()[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]]" name="loginWithValidUser" duration-ms="11" started-at="2016-06-08T15:55:24Z" finished-at="2016-06-08T15:55:24Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[@$Proxy8: one of [uiAutomator, accessibility, className, id, tagName, name, xpath, linkText, partialLinkText] should be filled]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: @$Proxy8: one of [uiAutomator, accessibility, className, id, tagName, name, xpath, linkText, partialLinkText] should be filled
	at io.appium.java_client.pagefactory.bys.builder.AppiumByBuilder.getFilledValue(AppiumByBuilder.java:93)
	at io.appium.java_client.pagefactory.bys.builder.AppiumByBuilder.createBy(AppiumByBuilder.java:134)
	at io.appium.java_client.pagefactory.DefaultElementByBuilder.buildMobileNativeBy(DefaultElementByBuilder.java:141)
	at io.appium.java_client.pagefactory.DefaultElementByBuilder.buildBy(DefaultElementByBuilder.java:192)
	at io.appium.java_client.pagefactory.AppiumElementLocatorFactory.createLocator(AppiumElementLocatorFactory.java:61)
	at io.appium.java_client.pagefactory.AppiumElementLocatorFactory.createLocator(AppiumElementLocatorFactory.java:46)
	at io.appium.java_client.pagefactory.AppiumElementLocatorFactory.createLocator(AppiumElementLocatorFactory.java:1)
	at org.openqa.selenium.support.pagefactory.DefaultFieldDecorator.decorate(DefaultFieldDecorator.java:56)
	at io.appium.java_client.pagefactory.AppiumFieldDecorator.decorate(AppiumFieldDecorator.java:155)
	at org.openqa.selenium.support.PageFactory.proxyFields(PageFactory.java:113)
	at org.openqa.selenium.support.PageFactory.initElements(PageFactory.java:105)
	at com.appium.pages.LoginPage.<init>(LoginPage.java:23)
	at com.appium.tests.LoginTest.loginWithValidUser(LoginTest.java:19)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.access$000(SuiteRunner.java:39)
	at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:400)
	at org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithValidUser -->
        <test-method status="PASS" signature="killServer(org.testng.ITestResult)[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]]" name="killServer" is-config="true" duration-ms="5295" started-at="2016-06-08T15:55:24Z" finished-at="2016-06-08T15:55:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=loginWithValidUser on [LoginTest passed=0 failed=0 skipped=0] status=FAILURE method=LoginTest.loginWithValidUser()[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- killServer -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:[LoginTest passed=0 failed=0 skipped=0]]" name="afterClass" is-config="true" duration-ms="180" started-at="2016-06-08T15:55:29Z" finished-at="2016-06-08T15:55:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- com.appium.tests.LoginTest -->
    </test> <!-- TestNG Test1 -->
  </suite> <!-- TestNG Forum -->
</testng-results>
